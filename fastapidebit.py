from fastapi import FastAPI
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware  
from pydantic import BaseModel
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from typing import Optional
import os
import tempfile

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class DebitNoteData(BaseModel):
    insurance_type: str
    sum_insured: float = 0.0
    basic_premium_rate: float = 0.0
    excess_protector: int = 0
    radio_cassette: str
    windscreen_cover: str
    tl: int = 0
    sd: int = 0
    class_of_insurance: str
    policy_number: str
    name_of_insured: str
    occupation: str
    pin_number: str
    vehicle_covered: str
    engine_no: str
    chasis: str
    sitting_capacity: str
    color: str
    period_of_insurance: str
    terms_of_payment: str
    generated_by: Optional[str] = None


@app.get("/")
async def home():
    return {
        "message": "Welcome to the Utility Cover API!",
        "description": "This API allows you to generate motor debit/risk notes in PDF format.",
        "endpoints": {
            "/generate-debit-note": "POST - Generate a debit note by providing the required data."
        }
    }


@app.post("/generate-debit-note")
async def generate_debit_note(data: DebitNoteData):
    filename = f"DebitNote_{data.vehicle_covered.replace(' ', '')}_{datetime.now().strftime('%d-%m-%Y')}.pdf"
    filepath = os.path.join(tempfile.gettempdir(), filename)

    c = canvas.Canvas(filepath, pagesize=A4)
    width, height = A4

    # Header
    c.setFont("Helvetica-Bold", 14)
    c.drawCentredString(width / 2, height - 40, "UTILITY COVER INSURANCE AGENCIES")
    c.setFont("Helvetica", 10)
    c.drawCentredString(width / 2, height - 60, "SUMMIT HOUSE, M13")
    c.drawCentredString(width / 2, height - 75, "P.O. BOX 4737 â€“ 00100 NAIROBI")
    c.drawCentredString(width / 2, height - 90, "TEL: 020 310040/1 CELL: 0722 766 583 / 0733-766 583")
    c.drawCentredString(width / 2, height - 105, "Email: utilitycoverinsuranceagencies@gmail.com")

    # Title
    y = height - 140
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y, "MOTOR DEBIT / RISK NOTE")
    y -= 40

    # Insurance Type
    c.setFont("Helvetica-Bold", 10)
    c.drawString(50, y, "INSURANCE TYPE:")
    c.setFont("Helvetica", 10)
    c.drawString(200, y, data.insurance_type.upper())
    y -= 25

    # Premium Calculation
    sum_insured = data.sum_insured or 0
    basic_premium_rate = data.basic_premium_rate or 0
    excess_protector = data.excess_protector or 0
    tl = data.tl or 0
    sd = data.sd or 0

    calculated_basic_premium = sum_insured if basic_premium_rate == 0 else (sum_insured * basic_premium_rate) / 100
    total_premium = calculated_basic_premium + excess_protector + tl + sd

    c.drawString(50, y, f"SUM INSURED:        Kshs. {sum_insured:,}")
    y -= 25
    c.drawString(50, y, f"BASIC PREMIUM RATE: {basic_premium_rate}%")
    y -= 25
    c.drawString(50, y, f"BASIC PREMIUM:      Kshs. {calculated_basic_premium:,.2f}")
    y -= 25
    c.drawString(50, y, f"Excess Protector:   Kshs. {excess_protector:,}")
    y -= 25
    c.drawString(50, y, f"Radio Cassette:     {data.radio_cassette.upper()} (FREE)")
    y -= 25
    c.drawString(50, y, f"Windscreen Cover:   {data.windscreen_cover.upper()} (FREE)")
    y -= 25
    c.drawString(50, y, f"+TL:                Kshs. {tl:,}")
    y -= 25
    c.drawString(50, y, f"+SD:                Kshs. {sd:,}")
    y -= 40

    # Total Premium
    c.setFont("Helvetica-Bold", 11)
    c.drawString(50, y, f"TOTAL PREMIUM:      Kshs. {total_premium:,.2f}")
    y -= 50

    # Policy Fields
    fields = [
        ("CLASS OF INSURANCE", data.class_of_insurance),
        ("POLICY NUMBER", data.policy_number),
        ("NAME OF INSURED", data.name_of_insured),
        ("OCCUPATION", data.occupation),
        ("PIN NUMBER", data.pin_number),
        ("VEHICLE COVERED", data.vehicle_covered),
        ("ENGINE NO.", data.engine_no),
        ("CHASIS", data.chasis),
        ("SITTING CAPACITY", data.sitting_capacity),
        ("COLOR", data.color),
        ("PERIOD OF INSURANCE", data.period_of_insurance),
    ]

    if data.generated_by:
        fields.append(("GENERATED BY", data.generated_by))

    for label, value in fields:
        c.setFont("Helvetica-Bold", 10)
        c.drawString(50, y, f"{label}:")
        c.setFont("Helvetica", 10)
        c.drawString(200, y, f"{value.upper() if isinstance(value, str) else value}")
        y -= 25

    # Reduced spacing after "GENERATED BY"
    y -= 15

    # Terms of Payment
    c.setFont("Helvetica-Bold", 10)
    c.drawString(50, y, "TERMS OF PAYMENT:")
    y -= 20
    c.setFont("Helvetica", 10)
    c.drawString(70, y, data.terms_of_payment.upper())
    y -= 25  # reduced from 50

    # Date Issued
    c.drawString(50, y, f"DATE ISSUED: {datetime.now().strftime('%d/%m/%Y')}")

    # Finalize PDF
    c.showPage()
    c.save()

    return FileResponse(filepath, filename=filename, media_type="application/pdf")
